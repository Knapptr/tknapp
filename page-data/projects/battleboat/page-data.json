{"componentChunkName":"component---src-components-project-page-tsx","path":"/projects/battleboat/","result":{"data":{"mdx":{"id":"fe389978-6665-5160-af10-96d9182e4089","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Battleboat\",\n  \"emoji\": \"ðŸš¢\",\n  \"description\": \"Battleship- built solely with react\",\n  \"tags\": [\"react\", \"hooks\", \"TDD\"],\n  \"code\": \"http://github.com/knapptr/BattleBoat\",\n  \"example\": \"http://knapptr.github.io/BattleBoat\",\n  \"published\": true,\n  \"date\": \"2021-04-20T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Note\"), mdx(\"p\", null, \"I had a lot of takeaways from this project- some of which are addressed in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://knapptr.github.io/Connect-Four\"\n  }, \"(de)connect four\")), mdx(\"h2\", null, \"Focal Points/Goals:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Styled Components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"React Hooks, particularly:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useContext\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useRef\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useCallback\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useReducer\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useEffect\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CSS Animations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TDD\")), mdx(\"h2\", null, \"Goals -cont.\"), mdx(\"p\", null, \"I wanted to make logic in this battleship implementation be capable of handling multiple players- both human and AI. I also wanted to have an option to change board size. It worked, it was tough- but by breaking all functions down into hyper-simple utilities, testing all the logic was fairly easy.\"), mdx(\"p\", null, \"One of my favorite parts during development, was watching 4 AI's battle it out randomly:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/363ae59fef48bc42b793ea597db85c91/randomAI.gif\",\n    \"alt\": \"4 AI players fight each other\"\n  })), mdx(\"h2\", null, \"Takeaways:\"), mdx(\"h3\", null, \"React Components:\"), mdx(\"p\", null, \"I put too many things into their own component, and there isn't a whole lot of consistency here. I found through the project some of the best ways to organize react components. It's easy to fall into the trap of putting everything into its own component. Small things don't need to be their own component!! Especially with . . .\"), mdx(\"h3\", null, \"Styled Components:\"), mdx(\"p\", null, \"Styled components is realllllly powerful library for working with react-components! Through building the project, I learned how powerful nesting CSS can be for getting components to look 'nice'. (I'm not making any claims that my components look nice...) If I were to start the project over again, I would organize my components differently.\"), mdx(\"h3\", null, \"useRef,useReducer,custom hooks, useContext.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useContext\"), \", especially used with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useReducer\"), \" is REALLY powerful! I found, however that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useReducer\"), \" didn't exactly accomplish what I wanted it to. While it made bundling logic for the game MUCH easier, I still had to organize my data differently than what feels instinctual. This article was helpful: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape\"\n  }, \"Redux: Normalizing-State-Shape\"), \". This is still one of my chief hangups with React, but once the data was normalized, I had a much better time with immutability. I'd be interested to check out libraries like \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"immer\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"immutable.js\"), \".\"), mdx(\"p\", null, \"Initially I sought to use a lot of custom hooks for this project, before moving a good deal of the logic into my game reducer. I'm particularly proud of my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useAlert\"), \" hook, that allows for global access to an array of alerts.\"), mdx(\"p\", null, \"I used useRef quite a bit, because I relied heavily on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeout\"), \" for accomplishing fades (this part of the project was a nightmare!). When setting any timeout, their ID was stored in an array by reference, so that they could be cleared later if the component unmounted before the timeout was called. This actually works pretty well, as far as I can tell. It was the first time I've returned a function from a useEffect to clean up a component. But on the subject of the 'fades' I wish I would have cleaned up some custom components/hooks to accomplish the fading. I am quite proud of my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FadeSwitch\"), \" which allows for components to be faded in and out using a timeout. This component handles most of the fade logic for switching between game-states. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Turns\"), \" also contains logic for fading between player turns.\"), mdx(\"h3\", null, \"CSS\"), mdx(\"p\", null, \"I struggle with CSS. I'm not super happy with the overall look and layout of this, but I did do a better job than usual making it responsive. The CSS should be refactored to be a little more clean and tidy. There are a lot of components with media queries strewn throughout that really should be consolidated. This was the first time I've implemented anything with CSS animations- though I ended up using mostly transitions for the fades. I was pretty amazed at how simple CSS animations are.\"), mdx(\"h3\", null, \"TDD\"), mdx(\"p\", null, \"This was the impetus for this project, and I'm not particularly thrilled about how it went. I came from a mentality of wanting to create big objects that would nest all the logic of the game into their methods. Something like:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Game{\\n    Players=[Player{\\n        name:\\\"player1\\\",board:[boardArray...]\\n        } ]\\n}\\n\")), mdx(\"p\", null, \"but this strategy doesn't really work well with React. I ended up writing a bunch of small functions, testing them individually, and composing more complex functions out of them. This worked well, and I had a lot of reusable logic- but I wish I had taken a broader approach with testing. Toward the tail end of the project, I learned a lot about \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"React Testing Library\"), \", and will definitely implement the component testing next time I take on a React project. I struggled writing good tests. I then went without testing for TOO LONG, trying to get workable components, that I abandoned testing. I wish I hadn't, but testing retroactively is super difficult. This was a 'teachable moment' of TDD. I understand WHY tests should be written first and foremost. Ironically, I spent the most time learning and reading through good testing material when I was wrapping this project up. Lesson learned.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Battleboat","tags":["react","hooks","TDD"],"description":"Battleship- built solely with react","emoji":"ðŸš¢","code":"http://github.com/knapptr/BattleBoat","example":"http://knapptr.github.io/BattleBoat"}}},"pageContext":{"id":"fe389978-6665-5160-af10-96d9182e4089"}},"staticQueryHashes":["3649515864"]}