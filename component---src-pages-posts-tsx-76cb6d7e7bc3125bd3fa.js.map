{"version":3,"sources":["webpack://tknapp/./src/components/PostShort.tsx","webpack://tknapp/./src/components/TypeFilter.tsx","webpack://tknapp/./src/pages/posts.tsx"],"names":["title","date","description","tags","type","image","slug","procImage","getImage","toLowerCase","format","parseISO","as","to","G","alt","map","tag","postTypes","setTWColorByType","TypeButton","handler","currentType","className","onClick","StyledTypeButton","filter","useState","currentPostType","setCurrentPostType","handleTypeChange","key","rawPosts","data","allMdx","edges","initializePosts","posts","post","node","frontmatter","fields","currentPosts","setCurrentPosts","Helmet","name","content","allPosts","filteredPosts","PostShort"],"mappings":"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","file":"component---src-pages-posts-tsx-76cb6d7e7bc3125bd3fa.js","sourcesContent":["import { format, parseISO } from \"date-fns\"\nimport { Link } from \"gatsby\"\nimport { GatsbyImageProps, getImage, GatsbyImage } from \"gatsby-plugin-image\"\nimport { FileNode } from \"gatsby-plugin-image/dist/src/components/hooks\"\nimport { styled } from \"twin.macro\"\nimport TypeStripe from \"./TypeStripe\"\nimport React from \"react\"\nimport tw from \"twin.macro\"\nimport \"twin.macro\"\n\nimport {\n  Container,\n  Header,\n  Text,\n  ColContainer,\n  NavLink,\n  ShortContainer,\n  ContainerBelowStripe,\n  TagBadge,\n} from \"./styled\"\n\nconst PostShort = ({\n  title,\n  date,\n  description,\n  tags,\n  type,\n  image,\n  slug,\n}: {\n  image: FileNode\n  title: string\n  date: string\n  description: string\n  tags: string[]\n  type: string\n  slug: string\n}) => {\n  const procImage = getImage(image)\n  return (\n    <ShortContainer>\n      <TypeStripe type={type} tw=\"py-0.5 px-4 font-tmono mb-2\">\n        {type ? type.toLowerCase() : \"other\"}\n      </TypeStripe>\n      {/* <Container tw=\"pt-1 pb-3 flex-grow h-full\"> */}\n      <ContainerBelowStripe>\n        <ColContainer tw=\"flex-nowrap\">\n          <div tw=\" w-3/4 md:w-1/2 order-2 sm:order-none text-center mx-auto sm:text-left\">\n            <h6 tw=\"font-light font-tmono text-tertiary-fg\">\n              {format(parseISO(date), \"MMM d, y\")}\n            </h6>\n            <Header as=\"h3\" tw=\"text-lg md:text-xl xl:text-2xl \">\n              <NavLink tw=\"hover:underline\" to={slug}>\n                {title}\n              </NavLink>\n            </Header>\n            <Text tw=\"\">{description}</Text>\n          </div>\n          <div tw=\"w-full md:w-1/2 relative md:max-h-48\">\n            {procImage ? (\n              <GatsbyImage\n                tw=\"h-full max-h-48 w-full\"\n                alt=\"surfin dog\"\n                image={procImage}\n              />\n            ) : null}\n            <div tw=\"absolute bottom-4  gap-1 right-2 flex  flex-wrap-reverse content-end items-end justify-end\">\n              {tags.map(tag =>\n                tag !== \"none\" ? (\n                  // <h6 tw=\"bg-primary-fill rounded-2xl py-1 px-4 border border-secondary-fg cursor-pointer opacity-75 \">\n\n                  <Link to={`/tags/${tag}`}>\n                    <TagBadge tw=\"opacity-80\">{tag}</TagBadge>\n                  </Link>\n                ) : // </h6>\n                null\n              )}\n            </div>\n          </div>\n        </ColContainer>\n      </ContainerBelowStripe>\n      {/* </Container> */}\n    </ShortContainer>\n  )\n}\n\nexport default PostShort\n","import { propTypes } from \"gatsby-plugin-image/dist/src/components/gatsby-image.server\"\nimport React, { useState } from \"react\"\nimport \"twin.macro\"\nimport tw, { styled } from \"twin.macro\"\nimport { PostTypes } from \"./PostTypeSort\"\n\nconst postTypes = [\"code\", \"other\", \"music\"]\ninterface FilterProps {\n  filter: (type: PostTypes) => void\n}\nconst setTWColorByType = (type: string) => {\n  switch (type) {\n    case \"music\":\n      return tw`bg-music`\n    case \"code\":\n      return tw`bg-code`\n    case \"all\":\n      return tw`bg-all`\n    default:\n      return tw`bg-other`\n  }\n}\ninterface ButtonProps {\n  type: PostTypes\n  currentType: string\n  handler: (type: PostTypes) => void\n  className?: string\n}\nconst TypeButton = ({ type, handler, currentType, className }: ButtonProps) => {\n  return (\n    <button\n      className={className}\n      onClick={() => (type === currentType ? handler(\"all\") : handler(type))}\n    >\n      {type}\n    </button>\n  )\n}\nconst StyledTypeButton = styled(TypeButton)`\n  ${tw`py-1 px-2 font-tmono shadow border border-primary-fg hover:(filter brightness-110)`}\n  ${({ type, currentType }) =>\n    currentType === \"all\"\n      ? setTWColorByType(type)\n      : currentType === type\n      ? setTWColorByType(type)\n      : tw`bg-tertiary-fill`};\n`\n\nconst TypeFilter = ({ filter }: FilterProps) => {\n  const [currentPostType, setCurrentPostType] = useState(\"all\")\n  const handleTypeChange = (type: PostTypes) => {\n    setCurrentPostType(type)\n    filter(type)\n  }\n  const handleAllButton = () => {\n    if (currentPostType === \"all\") return\n    setCurrentPostType(\"all\")\n    filter(\"all\")\n  }\n  return (\n    <ul tw=\"flex gap-1 justify-center mt-1 flex-wrap\">\n      <li>\n        {\" \"}\n        <StyledTypeButton\n          type=\"all\"\n          currentType={currentPostType}\n          handler={handleAllButton}\n        >\n          All\n        </StyledTypeButton>\n      </li>\n      {postTypes.map(type => (\n        <li>\n          <StyledTypeButton\n            key={type}\n            currentType={currentPostType}\n            handler={handleTypeChange}\n            type={type}\n          >\n            {type}\n          </StyledTypeButton>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default TypeFilter\n","import React, { useEffect, useState } from \"react\"\nimport Layout from \"../components/layout\"\nimport { graphql, Link, PageProps } from \"gatsby\"\nimport {\n  Button,\n  Container,\n  ContentBounds,\n  Header,\n  Text,\n} from \"../components/styled\"\nimport TagSorter, { PostTypes } from \"../components/PostTypeSort\"\nimport PostShort from \"../components/PostShort\"\nimport \"twin.macro\"\nimport { GatsbyImageProps } from \"gatsby-plugin-image\"\nimport { FileNode } from \"gatsby-plugin-image/dist/src/components/hooks\"\nimport TypeFilter from \"../components/TypeFilter\"\nimport { Helmet } from \"react-helmet\"\n\nexport interface QueryPosts {\n  allMdx: {\n    edges: {\n      node: {\n        fields: {\n          slug: string\n        }\n        frontmatter: {\n          date: string\n          title: string\n          tags: string[]\n          type: string\n          description: string\n          image: FileNode\n        }\n      }\n    }[]\n  }\n}\nexport interface PostInState {\n  title: string\n  date: string\n  tags: string[]\n  type: string\n  description: string\n  image: any\n}\n\nexport type Posts = PostInState[]\n\nconst PostsPage = ({ data }: PageProps<QueryPosts>) => {\n  const rawPosts = data.allMdx.edges\n  type RawPosts = typeof rawPosts\n\n  const initializePosts = (posts: RawPosts) => {\n    let allPosts = posts.map(post => ({\n      title: post.node.frontmatter.title,\n      date: post.node.frontmatter.date,\n      tags: post.node.frontmatter.tags,\n      type: post.node.frontmatter.type,\n      description: post.node.frontmatter.description,\n      image: post.node.frontmatter.image,\n      slug: post.node.fields.slug,\n    }))\n    return allPosts\n  }\n  const filterPostsByType = (type: PostTypes): void => {\n    const allPosts = initializePosts(rawPosts)\n    if (type === \"all\") {\n      setCurrentPosts(allPosts)\n    } else {\n      const filteredPosts = allPosts.filter(post => post.type === type)\n      setCurrentPosts(filteredPosts)\n    }\n  }\n\n  const [currentPosts, setCurrentPosts] = useState(initializePosts(rawPosts))\n\n  return (\n    <Layout>\n      <Helmet>\n        <title>Posts-Tknapp</title>\n        <meta\n          name=\"description\"\n          content=\"Ramblings, musings and diatribes by Tyler Knapp\"\n        />\n      </Helmet>\n      <header tw=\"py-3 px-6 bg-tertiary-fill mb-8 rounded-lg\">\n        <Header tw=\"mx-auto text-center\">Posts</Header>\n        <TypeFilter filter={filterPostsByType} />\n      </header>\n      <ContentBounds tw=\"\">\n        <div tw=\"flex flex-col items-center flex-initial justify-center\">\n          <ul tw=\"flex flex-col gap-4 \">\n            {currentPosts.map(post => {\n              return (\n                <li tw=\"hover:shadow-2xl filter brightness-95 transition-all duration-300\">\n                  <PostShort\n                    title={post.title}\n                    date={post.date}\n                    tags={post.tags}\n                    description={post.description}\n                    type={post.type}\n                    image={post.image}\n                    slug={post.slug}\n                  />\n                </li>\n              )\n            })}\n          </ul>\n          {/* <div tw=\"bg-secondary-fill my-4 rounded py-2 px-4 col-span-7 md:col-span-2 row-end-auto\">\n            <TagSorter setSortBy={filterPostsByType} />\n          </div> */}\n        </div>\n      </ContentBounds>\n    </Layout>\n  )\n}\nexport const query = graphql`\n  query MyQuery {\n    allMdx(\n      sort: { fields: frontmatter___date, order: DESC }\n      filter: {\n        frontmatter: { published: { eq: true } }\n        fields: { contentType: { eq: \"posts\" } }\n      }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date\n            title\n            type\n            tags\n            description\n            image {\n              childImageSharp {\n                gatsbyImageData(placeholder: BLURRED, layout: CONSTRAINED)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default PostsPage\n"],"sourceRoot":""}