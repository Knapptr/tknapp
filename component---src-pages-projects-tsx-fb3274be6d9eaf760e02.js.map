{"version":3,"sources":["webpack://tknapp/./node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js","webpack://tknapp/./src/components/ProjectShort.tsx","webpack://tknapp/./src/components/TypeStripe.tsx","webpack://tknapp/./src/pages/projects.tsx"],"names":["newStyled","forEach","tagName","StyledProjectLink","LinkButton","project","type","emoji","to","slug","title","tags","map","tag","description","href","code","target","example","as","Link","TypeStripe","toLowerCase","trim","projects","data","allMdx","edges","name","content","projectData","node","frontmatter","fields"],"mappings":"mIASIA,G,QAAY,YAFL,CAAC,IAAK,OAAQ,UAAW,OAAQ,UAAW,QAAS,QAAS,IAAK,OAAQ,MAAO,MAAO,MAAO,aAAc,OAAQ,KAAM,SAAU,SAAU,UAAW,OAAQ,OAAQ,MAAO,WAAY,OAAQ,WAAY,KAAM,MAAO,UAAW,MAAO,SAAU,MAAO,KAAM,KAAM,KAAM,QAAS,WAAY,aAAc,SAAU,SAAU,OAAQ,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAAQ,SAAU,SAAU,KAAM,OAAQ,IAAK,SAAU,MAAO,QAAS,MAAO,MAAO,SAAU,QAAS,SAAU,KAAM,OAAQ,OAAQ,MAAO,OAAQ,UAAW,OAAQ,WAAY,OAAQ,QAAS,MAAO,WAAY,SAAU,KAAM,WAAY,SAAU,SAAU,IAAK,QAAS,UAAW,MAAO,WAAY,IAAK,KAAM,KAAM,OAAQ,IAAK,OAAQ,SAAU,UAAW,SAAU,QAAS,SAAU,OAAQ,SAAU,QAAS,MAAO,UAAW,MAAO,QAAS,QAAS,KAAM,WAAY,QAAS,KAAM,QAAS,OAAQ,QAAS,KAAM,QAAS,IAAK,KAAM,MAAO,QAAS,MAC77B,SAAU,WAAY,OAAQ,UAAW,gBAAiB,IAAK,QAAS,OAAQ,iBAAkB,OAAQ,OAAQ,UAAW,UAAW,WAAY,iBAAkB,OAAQ,OAAQ,MAAO,OAAQ,SAEhMC,SAAQ,SAAUC,GAErBF,EAAUE,GAAWF,EAAUE,O,2GCajC,IAAMC,GAAoB,OAAOC,KAAP,qBAAH,0U,62BAgDvB,IA7CqB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QACtB,OACE,QAAC,KAAD,MACE,QAAC,IAAD,CAAYC,KAAK,WAAjB,YACA,QAAC,KAAD,MACE,0BACE,uBACE,uBAAiCD,EAAQE,QACzC,QAAC,KAAD,OAA2BC,GAAIH,EAAQI,OACrC,qBAAuCJ,EAAQK,UAGnD,sBACGL,EAAQM,KAAKC,KAAI,SAAAC,GAAG,OACnB,QAAC,KAAD,CAAML,GAAE,SAAWK,IACjB,QAAC,KAAD,MACE,qBAAkBA,WAM5B,uBACE,QAAC,KAAD,KAAOR,EAAQS,eAEjB,uBACE,QAACX,EAAD,CAAmBY,KAAMV,EAAQW,KAAMC,OAAO,UAA9C,QAGCZ,EAAQa,UACP,QAACf,EAAD,CAAmBY,KAAMV,EAAQa,QAASD,OAAO,UAAjD,YAKF,QAACd,EAAD,CAAmBgB,GAAIC,KAAMZ,GAAIH,EAAQI,MAAzC,iB,sCC5DJY,GAAU,E,QAAA,kMAEZ,YAAe,IAAZf,EAAW,EAAXA,KAEH,OADAA,EAAOA,EAAOA,EAAKgB,cAAcC,OAAS,SAExC,IAAK,QACH,MAAS,uCACX,IAAK,OACH,MAAS,sCACX,IAAK,QACH,MAAS,uCACX,IAAK,UACH,MAAS,yCACX,IAAK,OAEL,QACE,MAAS,0CAhBD,KAqBhB,O,shBCsBA,UAtCoB,SAAC,GAAiC,IAC9CC,EAD6C,EAA9BC,KACCC,OAAOC,MAC7B,OACE,QAAC,IAAD,MACE,QAAC,IAAD,MACE,yCACA,gBACEC,KAAK,cACLC,QAAQ,wFAGZ,0BACE,QAAC,KAAD,sBAEF,QAAC,KAAD,MACE,qBACGL,EAASZ,KAAI,SAAAkB,GACZ,IAAMzB,EAAU,CACdK,MAAOoB,EAAYC,KAAKC,YAAYtB,MACpCI,YAAagB,EAAYC,KAAKC,YAAYlB,YAC1CP,MAAOuB,EAAYC,KAAKC,YAAYzB,MACpCE,KAAMqB,EAAYC,KAAKE,OAAOxB,KAC9BS,QAASY,EAAYC,KAAKC,YAAYd,QACtCP,KAAMmB,EAAYC,KAAKC,YAAYrB,KACnCK,KAAMc,EAAYC,KAAKC,YAAYhB,MAErC,OACE,sBACE,QAAC,IAAD,CAAcX,QAASA","file":"component---src-pages-projects-tsx-fb3274be6d9eaf760e02.js","sourcesContent":["import '@babel/runtime/helpers/extends';\nimport 'react';\nimport '@emotion/is-prop-valid';\nimport createStyled from '../base/dist/emotion-styled-base.browser.esm.js';\nimport '@emotion/react';\nimport '@emotion/utils';\nimport '@emotion/serialize';\nvar tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG\n'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];\nvar newStyled = createStyled.bind();\ntags.forEach(function (tagName) {\n  // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type\n  newStyled[tagName] = newStyled(tagName);\n});\nexport default newStyled;","import { graphql, Link } from \"gatsby\"\nimport React from \"react\"\nimport tw, { styled } from \"twin.macro\"\nimport \"twin.macro\"\nimport {\n  ContainerBelowStripe,\n  LinkButton,\n  ShortContainer,\n  TagBadge,\n  Text,\n} from \"./styled\"\nimport TypeStripe from \"./TypeStripe\"\n\ninterface Props {\n  project: {\n    title: string\n    description: string\n    tags: string[]\n    emoji: string\n    slug: string\n    example: string\n    code: string\n  }\n}\n\nconst StyledProjectLink = styled(LinkButton)`\n  ${tw`hover:shadow-xl transition-all`}\n`\nconst ProjectShort = ({ project }: Props) => {\n  return (\n    <ShortContainer>\n      <TypeStripe type=\"project\">project</TypeStripe>\n      <ContainerBelowStripe>\n        <header tw=\"\">\n          <div tw=\"flex items-baseline gap-2 \">\n            <span tw=\"text-2xl lg:text-4xl\">{project.emoji}</span>\n            <Link tw=\"hover:underline\" to={project.slug}>\n              <h2 tw=\"text-lg font-bold font-tmono\">{project.title}</h2>\n            </Link>\n          </div>\n          <div tw=\"flex flex-wrap-reverse my-1 gap-1\">\n            {project.tags.map(tag => (\n              <Link to={`/tags/${tag}`}>\n                <TagBadge>\n                  <h6 tw=\"text-sm\">{tag}</h6>\n                </TagBadge>\n              </Link>\n            ))}\n          </div>\n        </header>\n        <div tw=\"max-w-sm\">\n          <Text>{project.description}</Text>\n        </div>\n        <div tw=\"mt-auto flex justify-center sm:justify-start md:justify-center md:mx-0 gap-1 flex-wrap\">\n          <StyledProjectLink href={project.code} target=\"_blank\">\n            Code\n          </StyledProjectLink>\n          {project.example && (\n            <StyledProjectLink href={project.example} target=\"_blank\">\n              Example\n            </StyledProjectLink>\n          )}\n\n          <StyledProjectLink as={Link} to={project.slug}>\n            {/* This shows as an error, but is not an issue */}\n            Write-up\n          </StyledProjectLink>\n        </div>\n      </ContainerBelowStripe>\n    </ShortContainer>\n  )\n}\n\nexport default ProjectShort\n","import tw, { styled } from \"twin.macro\"\n\ntype StripeProps = { type: string }\nconst TypeStripe = styled.div<StripeProps>`\n  ${tw`font-tmono px-4 -ml-2 rounded-l-lg`}\n  ${({ type }) => {\n    type = type ? type.toLowerCase().trim() : \"other\"\n    switch (type) {\n      case \"music\":\n        return tw`bg-music`\n      case \"code\":\n        return tw`bg-code`\n      case \"other\":\n        return tw`bg-other`\n      case \"project\":\n        return tw`bg-project`\n      case \"post\":\n        return tw`bg-other`\n      default:\n        return tw`bg-other`\n    }\n  }};\n`\n\nexport default TypeStripe\n","import Layout from \"../components/layout\"\nimport { ContentBounds, Header } from \"../components/styled\"\nimport { graphql, PageProps } from \"gatsby\"\nimport ProjectShort from \"../components/ProjectShort\"\nimport \"twin.macro\"\nimport React from \"react\"\nimport { Helmet } from \"react-helmet\"\n\nconst ProjectPage = ({ data }: PageProps<IQuery>) => {\n  const projects = data.allMdx.edges\n  return (\n    <Layout>\n      <Helmet>\n        <title>Projects-Tknapp</title>\n        <meta\n          name=\"description\"\n          content=\"Projects created to learn various software development techniques and frameworks.\"\n        />\n      </Helmet>\n      <header tw=\"py-3 px-6 bg-tertiary-fill mb-8 rounded-lg\">\n        <Header tw=\"mx-auto text-center\">Projects</Header>\n      </header>\n      <ContentBounds>\n        <ul tw=\"flex flex-wrap gap-4 justify-center\">\n          {projects.map(projectData => {\n            const project = {\n              title: projectData.node.frontmatter.title,\n              description: projectData.node.frontmatter.description,\n              emoji: projectData.node.frontmatter.emoji,\n              slug: projectData.node.fields.slug,\n              example: projectData.node.frontmatter.example,\n              tags: projectData.node.frontmatter.tags,\n              code: projectData.node.frontmatter.code,\n            }\n            return (\n              <li tw=\"w-80 flex-grow flex-shrink\">\n                <ProjectShort project={project} />\n              </li>\n            )\n          })}\n        </ul>\n      </ContentBounds>\n    </Layout>\n  )\n}\n\nexport default ProjectPage\n\ninterface IQuery {\n  allMdx: {\n    edges: {\n      node: {\n        fields: {\n          slug: string\n        }\n        frontmatter: {\n          code: string\n          description: string\n          emoji: string\n          example: string\n          tags: string[]\n          title: string\n        }\n      }\n    }[]\n  }\n}\n\nexport const pageQuery = graphql`\n  query projects {\n    allMdx(\n      filter: {\n        fields: { contentType: { eq: \"projects\" } }\n        frontmatter: { published: { eq: true } }\n      }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            code\n            description\n            emoji\n            example\n            tags\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}