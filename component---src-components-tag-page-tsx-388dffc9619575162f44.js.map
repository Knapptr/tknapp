{"version":3,"sources":["webpack://tknapp/./src/components/tag-page.tsx"],"names":["pageContext","edges","data","allMdx","to","tag","map","edge","node","content","title","frontmatter","tags","description","type","fields","contentType","slug","date","postType","format","parseISO"],"mappings":"i8CAoJA,UA5HgB,SAAC,GAKiB,IAJhCA,EAI+B,EAJ/BA,YAEYC,EAEmB,EAH/BC,KACEC,OAAUF,MAkDZ,OACE,yBACE,QAAC,IAAD,MACE,QAAC,KAAD,MACE,0BACE,QAAC,KAAD,SACE,uBACE,QAAC,KAAD,CAAMG,GAAG,SAAT,UACA,uBAA4BJ,EAAYK,SAI9C,sBACGJ,EAAMK,KAAI,SAAAC,GACT,OA7DUC,EA6DUD,EAAKC,KA5D7BC,EAAU,CACdC,MAAOF,EAAKG,YAAYD,MACxBE,KAAMJ,EAAKG,YAAYC,KACvBC,YAAaL,EAAKG,YAAYE,YAC9BC,KAAkC,UAA5BN,EAAKO,OAAOC,YAA0B,OAAS,UACrDC,KAAMT,EAAKO,OAAOE,KAClBC,KAAMV,EAAKG,YAAYO,KACvBC,SAAUX,EAAKG,YAAYG,OAI3B,QAAC,KAAD,SACE,QAAC,IAAD,CAAYA,KAAML,EAAQK,MAAOL,EAAQK,OACzC,QAAC,KAAD,SACE,uBACE,uBACE,QAAC,KAAD,CAASV,GAAIK,EAAQQ,MAAOR,EAAQC,OACnCD,EAAQU,WACP,QAAC,IAAD,OAEEL,KAAML,EAAQU,UAEbV,EAAQU,UAET,uBACGV,EAAQS,OAAQE,QAAOC,OAASZ,EAAQS,MAAO,gBAKxD,sBACGT,EAAQG,KAAKN,KAAI,SAAAD,GAAG,OACnB,QAAC,KAAD,CAAMD,GAAE,SAAWC,IACjB,QAAC,KAAD,MACE,oBAAiBA,WAM3B,QAAC,KAAD,KAAOI,EAAQI,eAzCF,IAACL,EACdC,OA+DA,QAAC,KAAD,OAA2BL,GAAG,SAA9B","file":"component---src-components-tag-page-tsx-388dffc9619575162f44.js","sourcesContent":["import { graphql, Link, PageProps } from \"gatsby\"\nimport React from \"react\"\nimport Layout from \"./layout\"\nimport {\n  ContainerBelowStripe,\n  ContentBounds,\n  ContentContainer,\n  Header,\n  NavLink,\n  ShortContainer,\n  TagBadge,\n  Text,\n} from \"./styled\"\nimport \"twin.macro\"\nimport ContentLayout from \"./ContentLayout\"\nimport { Icon } from \"@fortawesome/fontawesome-svg-core\"\nimport TypeStripe from \"./TypeStripe\"\nimport { format, parseISO } from \"date-fns\"\n\ninterface PropsWithTag extends PageProps {\n  pageContext: {\n    tag: string\n  }\n}\nconst TagPage = ({\n  pageContext,\n  data: {\n    allMdx: { edges },\n  },\n}: PropsWithTag & IQueryData) => {\n  const renderLayout = (node: IContent) => {\n    const content = {\n      title: node.frontmatter.title,\n      tags: node.frontmatter.tags,\n      description: node.frontmatter.description,\n      type: node.fields.contentType === \"posts\" ? \"post\" : \"project\",\n      slug: node.fields.slug,\n      date: node.frontmatter.date,\n      postType: node.frontmatter.type,\n    }\n\n    return (\n      <ShortContainer tw=\"w-96 h-auto flex-grow\">\n        <TypeStripe type={content.type}>{content.type}</TypeStripe>\n        <ContainerBelowStripe tw=\" mt-1 justify-start\">\n          <div tw=\"mb-6\">\n            <div tw=\"flex mb-2 items-baseline flex-wrap-reverse text-lg\">\n              <NavLink to={content.slug}>{content.title}</NavLink>\n              {content.postType && (\n                <TypeStripe\n                  tw=\"ml-2 flex items-baseline flex-grow -mr-4\"\n                  type={content.postType}\n                >\n                  {content.postType}\n\n                  <span tw=\"text-sm ml-auto font-tmono\">\n                    {content.date && format(parseISO(content.date), \"MMM d, y\")}\n                  </span>\n                </TypeStripe>\n              )}\n            </div>\n            <div tw=\"flex flex-wrap gap-1\">\n              {content.tags.map(tag => (\n                <Link to={`/tags/${tag}`}>\n                  <TagBadge>\n                    <p tw=\"text-sm\">{tag}</p>\n                  </TagBadge>\n                </Link>\n              ))}\n            </div>\n          </div>\n          <Text>{content.description}</Text>\n        </ContainerBelowStripe>\n      </ShortContainer>\n    )\n  }\n\n  return (\n    <>\n      <Layout>\n        <ContentBounds>\n          <header tw=\"py-3 px-6 bg-tertiary-fill mb-8 rounded-lg\">\n            <Header tw=\"mx-auto text-center text-tertiary-fg\">\n              <div tw=\"flex flex-wrap\">\n                <Link to=\"/tags\">tags/</Link>\n                <span tw=\"text-primary-fg\">{pageContext.tag}</span>\n              </div>\n            </Header>\n          </header>\n          <div tw=\"flex flex-wrap gap-4 justify-center\">\n            {edges.map(edge => {\n              return renderLayout(edge.node)\n            })}\n          </div>\n          <NavLink tw=\"mt-6 mx-auto\" to=\"/tags\">\n            View All Tags\n          </NavLink>\n        </ContentBounds>\n      </Layout>\n    </>\n  )\n}\n\ninterface IContent {\n  frontmatter: {\n    description: string\n    title: string\n    tags: string[]\n    date?: string\n    type?: string\n  }\n  fields: {\n    slug: string\n    contentType: string\n  }\n}\ninterface IQueryData {\n  data: {\n    allMdx: {\n      edges: {\n        node: IContent\n      }[]\n    }\n  }\n}\nexport const pageQuery = graphql`\n  query tags($tag: [String]) {\n    allMdx(\n      filter: { frontmatter: { tags: { in: $tag }, published: { eq: true } } }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            description\n            title\n            tags\n            date\n            type\n          }\n          fields {\n            slug\n            contentType\n          }\n        }\n      }\n    }\n  }\n`\nexport default TagPage\n"],"sourceRoot":""}