{"version":3,"sources":["webpack://tknapp/./src/pages/tags.tsx"],"names":["SmallTypeFlag","children","data","allMdx","distinct","edges","tags","name","content","map","tag","to","allRelatedPosts","filter","edge","node","frontmatter","includes","fields","slug","title","contentType","render","slice","length","push","getPostsByTagRenderLogic"],"mappings":"sLAQA,IAAMA,GAAa,mSAEf,kBAAgC,YAAhC,EAAGC,SAA2C,yCAAiB,yCAFhD,K,q5CAqEnB,UAhEiB,SAAC,GAIC,IAAD,IAHhBC,KACEC,OAAUC,EAEI,EAFJA,SAAUC,EAEN,EAFMA,MAIhBC,EAAOF,EA2Bb,OACE,yBACE,QAAC,IAAD,MACE,QAAC,IAAD,MACE,qCACA,gBAAMG,KAAK,cAAcC,QAAQ,mCAEnC,0BACE,QAAC,KAAD,kBAEF,QAAC,KAAD,MACE,oBACE,sBACGF,EAAKG,KAAI,SAAAC,GAAG,OACX,uBACE,QAAC,KAAD,OAA8BC,GAAE,SAAWD,IACzC,qBAA6CA,KAE/C,qBA3CiB,SAACA,GAChC,IAAME,EAAkBP,EACrBQ,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAAYV,KAAKW,SAASP,MACnDD,KAAI,SAAAK,GAAI,OACP,sBACE,QAAC,KAAD,OAAiCH,GAAIG,EAAKC,KAAKG,OAAOC,MACnDL,EAAKC,KAAKC,YAAYI,OACvB,QAACpB,EAAD,QACoC,aAAjCc,EAAKC,KAAKG,OAAOG,YAA6B,UAAY,aAK/DC,EAASV,EAAgBW,MAAM,EAAG,GAUxC,OATIX,EAAgBY,OAAS,GAC3BF,EAAOG,MACL,QAAC,KAAD,OAA8Bd,GAAE,SAAWD,IACzC,2BACOE,EAAgBY,OAAS,EADhC,cAMCF,EAqBUI,CAAyBhB","file":"component---src-pages-tags-tsx-1ca04d5ee369bfad1fc0.js","sourcesContent":["import { graphql, Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport React from \"react\"\nimport { ContentBounds, Header, NavLink } from \"../components/styled\"\nimport \"twin.macro\"\nimport { Helmet } from \"react-helmet\"\nimport tw, { styled } from \"twin.macro\"\n\nconst SmallTypeFlag = styled.span`\n  ${tw`py-0.5 px-1 font-tmono text-xs text-gray-800 rounded`}\n  ${({ children }) => (children === \"project\" ? tw`bg-project` : tw`bg-other`)}\n`\n\nconst TagsPage = ({\n  data: {\n    allMdx: { distinct, edges },\n  },\n}: IQueryData) => {\n  //alphabatize tags\n  const tags = distinct\n\n  const getPostsByTagRenderLogic = (tag: string) => {\n    const allRelatedPosts = edges\n      .filter(edge => edge.node.frontmatter.tags.includes(tag))\n      .map(edge => (\n        <li tw=\"bg-tertiary-fill px-3 py-1 rounded hover:shadow\">\n          <Link tw=\"flex items-baseline  \" to={edge.node.fields.slug}>\n            {edge.node.frontmatter.title}\n            <SmallTypeFlag tw=\"ml-auto\">\n              {edge.node.fields.contentType === \"projects\" ? \"project\" : \"post\"}\n            </SmallTypeFlag>\n          </Link>\n        </li>\n      ))\n    const render = allRelatedPosts.slice(0, 3)\n    if (allRelatedPosts.length > 3) {\n      render.push(\n        <NavLink tw=\"hover:underline\" to={`/tags/${tag}`}>\n          <p tw=\"font-tmono text-sm\">\n            and {allRelatedPosts.length - 3} more...\n          </p>\n        </NavLink>\n      )\n    }\n    return render\n  }\n  return (\n    <>\n      <Layout>\n        <Helmet>\n          <title>Tags-Tknapp</title>\n          <meta name=\"description\" content=\"Tagged content on tknapp.net\" />\n        </Helmet>\n        <header tw=\"py-3 px-6 bg-tertiary-fill mb-8 rounded-lg\">\n          <Header tw=\"mx-auto text-center\">Tags</Header>\n        </header>\n        <ContentBounds>\n          <div>\n            <div tw=\"flex flex-wrap gap-4\">\n              {tags.map(tag => (\n                <div tw=\"w-56 py-2 px-2 bg-secondary-fill flex-grow\">\n                  <NavLink tw=\"hover:underline\" to={`/tags/${tag}`}>\n                    <h1 tw=\"font-bold font-tmono text-lg mb-2 \">{tag}</h1>\n                  </NavLink>\n                  <ul tw=\"flex flex-col gap-2\">\n                    {getPostsByTagRenderLogic(tag)}\n                  </ul>\n                </div>\n              ))}\n            </div>\n          </div>\n        </ContentBounds>\n      </Layout>\n    </>\n  )\n}\n\nexport default TagsPage\ninterface IQueryData {\n  data: {\n    allMdx: {\n      distinct: string[]\n      edges: {\n        node: {\n          fields: {\n            slug: string\n            contentType: string\n          }\n          frontmatter: {\n            title: string\n            description: string\n            tags: string[]\n          }\n        }\n      }[]\n    }\n  }\n}\nexport const pageQuery = graphql`\n  query tagsPageQuery {\n    allMdx(filter: { frontmatter: { published: { eq: true } } }) {\n      distinct(field: frontmatter___tags)\n      edges {\n        node {\n          fields {\n            slug\n            contentType\n          }\n          frontmatter {\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}